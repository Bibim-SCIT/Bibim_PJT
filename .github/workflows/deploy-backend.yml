name: Java CI with Gradle

on:
  push:
    branches:
      - 'dev'
    paths:
      - 'Back-End/**'

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      APPLICATION_PROD: ${{ secrets.APPLICATION_PROD }}

    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      # 설정 파일 생성
      - name: application yml setting
        run: |
          mkdir -p ./Back-End/src/main/resources/
          echo ${{ env.APPLICATION_PROD }} | base64 --decode > ./Back-End/src/main/resources/application-prod.yml
      - name: Check current directory
        run: pwd
      - name: current files
        run: ls -a

      # Gradle 실행권한 부여
      - name: Grant execute permission to gradlew
        run: chmod +x ./Back-End/gradlew
        
      # Back-End 디렉토리에서 Gradle 빌드 실행
      - name: Build with gradle
        working-directory: ./Back-End
        run: ./gradlew clean build -x test --stacktrace --info

      # JAR 파일 확인
      - name: List build directory (Check JAR)
        run: ls -lh ./Back-End/build/libs/
        
      # DockerHub에 로그인
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker 이미지 build 후 DockerHub에 push
      - name: Build Docker
        run: docker build --platform linux/amd64 -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:prod ./Back-End
      - name: Push Docker
        run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:prod

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set target IP
        run: |
          # STATUS=$(curl -o /dev/null -w "%{http_code}" "http://${{ secrets.SERVER_DOMAIN }}/actuator/health")
          # echo $STATUS
          # if [ $STATUS = 200 ]; then
          #   CURRENT_UPSTREAM=$(curl -s "http://${{ secrets.SERVER_DOMAIN }}/actuator/health")
          # else
          #   CURRENT_UPSTREAM=green
          # fi
          # echo CURRENT_UPSTREAM=$CURRENT_UPSTREAM >> $GITHUB_ENV
          # if [ $CURRENT_UPSTREAM = blue ]; then
          #   echo "CURRENT_PORT=8080" >> $GITHUB_ENV
          #   echo "STOPPED_PORT=8081" >> $GITHUB_ENV
          #   echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV
          # else
          #   echo "CURRENT_PORT=8081" >> $GITHUB_ENV
          #   echo "STOPPED_PORT=8080" >> $GITHUB_ENV
          #   echo "TARGET_UPSTREAM=blue" >> $GITHUB_ENV
          # fi
          
          # Health check 호출 (서버가 실행 중인지 확인)
          HEALTH_RESPONSE=$(curl -s --max-time 30 --write-out "%{http_code}" "http://***/actuator/health")
          HTTP_STATUS=$?
          
          # 상태 확인 (응답이 없거나 200 상태가 아닌 경우 오류 처리)
          if [ $HTTP_STATUS -ne 0 ]; then
            echo "Error: curl failed with status $HTTP_STATUS"
            CURRENT_UPSTREAM="green"
          else
            # 상태가 "UP"인 경우에만 정상적인 health 정보를 가져옴
            STATUS=$(echo "$HEALTH_RESPONSE" | jq -r '.status')
            
            if [ "$STATUS" = "UP" ]; then
              # 실행 중인 Docker 컨테이너 이름 가져오기
              CURRENT_UPSTREAM=$(docker ps --filter "status=running" --format "{{.Names}}" | grep -E 'blue|green')
            else
              CURRENT_UPSTREAM="green"
            fi
          fi
                    
          # 현재 실행 중인 컨테이너가 blue일 경우, green을 타겟으로 설정
          if [ "$CURRENT_UPSTREAM" = "blue" ]; then
            echo "CURRENT_PORT=8080" >> $GITHUB_ENV
            echo "STOPPED_PORT=8081" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV
          else
            echo "CURRENT_PORT=8081" >> $GITHUB_ENV
            echo "STOPPED_PORT=8080" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=blue" >> $GITHUB_ENV
          fi
          
          # 컨테이너 상태 출력
          echo "CURRENT_UPSTREAM=$CURRENT_UPSTREAM"
          echo "TARGET_UPSTREAM=$TARGET_UPSTREAM"
          
      - name: Docker compose
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.SERVER_DOMAIN }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:prod
            sudo docker-compose -f docker-compose.yml up -d ${{ env.TARGET_UPSTREAM }}
      - name: Check deploy server URL
        uses: jtalk/url-health-check-action@v4
        with:
          url: http://${{ secrets.LIVE_SERVER_IP }}:${{ env.STOPPED_PORT }}/global/health-check
          max-attempts: 5
          retry-delay: 10s

      - name: Change nginx upstream
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.SERVER_DOMAIN }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker exec -i nginxserver bash -c 'echo "set \$service_url ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && nginx -s reload' 
      - name: Stop current server
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.SERVER_DOMAIN }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true   # 실행 중 문제가 생기면 더 진행 X
          script: |
            sudo docker stop ${{ env.CURRENT_UPSTREAM }}
            sudo docker rm ${{ env.CURRENT_UPSTREAM }}
            
