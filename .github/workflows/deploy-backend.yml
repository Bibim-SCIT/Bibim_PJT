name: Java CI with Gradle

on:
  push:
    branches:
      - 'dev'
    paths:
      - 'Back-End/**'

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      APPLICATION_PROD: ${{ secrets.APPLICATION_PROD }}

    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      # 설정 파일 생성
      - name: application yml setting
        run: |
          mkdir -p ./Back-End/src/main/resources/
          echo ${{ env.APPLICATION_PROD }} | base64 --decode > ./Back-End/src/main/resources/application.yml
      - name: Check current directory
        run: pwd
      - name: current files
        run: ls -a

      # Gradle 실행권한 부여
      - name: Grant execute permission to gradlew
        run: chmod +x ./Back-End/gradlew
        
      # Back-End 디렉토리에서 Gradle 빌드 실행
      - name: Build with gradle
        working-directory: ./Back-End
        run: ./gradlew clean build -x test --stacktrace --info

      # JAR 파일 확인
      - name: List build directory (Check JAR)
        run: ls -lh ./Back-End/build/libs/
        
      # DockerHub에 로그인
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker 이미지 build 후 DockerHub에 push
      - name: Build Docker
        run: docker build --platform linux/amd64 -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }} ./Back-End
      - name: Push Docker
        run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up SSH key
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}  # GitHub Secrets에 저장된 SSH 비공개 키

    - name: Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_SERVER_IP }} "sudo sh deploy.sh"
