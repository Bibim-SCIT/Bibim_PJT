name: Build and Deploy Docker Image

on:
  push:
    branches:
      - dev
    paths:
      - 'Back-End/**'

  workflow_dispatch:
    inputs:
      environment:
        description: '배포할 환경을 선택하세요.'
        required: true
        default: 'dev'

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      DB_URL: ${{ secrets.DB_URL }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
      S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
      S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Create application.yml
      run: |
        mkdir -p src/main/resources
        cat <<EOL > src/main/resources/application.yml
        spring:
          application:
            name: Back-End
          datasource:
            url: $DB_URL
            username: $DB_USERNAME
            password: $DB_PASSWORD
            driver-class-name: com.mysql.cj.jdbc.Driver
          jpa:
            hibernate:
              ddl-auto: update
            generate-ddl: true
            show-sql: true
            properties:
              hibernate:
                format_sql: true
                dialect: org.hibernate.dialect.MySQL8Dialect
          servlet:
            multipart:
              enabled: true
              max-file-size: 100MB
              max-request-size: 2MB
          cache:
            type: caffeine
          mail:
            host: smtp.gmail.com
            port: 587
            username: $MAIL_USERNAME
            password: $MAIL_PASSWORD
            properties:
              mail:
                smtp:
                  auth: true
                  starttls:
                    enable: true
          data:
            redis:
              host: localhost
              port: 6379
          cloud:
            aws:
              credentials:
                access-key: $S3_ACCESS_KEY
                secret-key: $S3_SECRET_KEY
            region:
              static: us-east-1
            stack:
              auto: false
            s3:
              bucket: bibim
        logging:
          level:
            org.springframework.security: DEBUG
        secret_key: $SECRET_KEY
        EOL

    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/bibim:dev ./Back-End
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        docker push ${{ secrets.DOCKER_USERNAME }}/bibim:dev

  deploy:
    runs-on: ubuntu-latest
    needs: build 
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup SSH Key with proper permissions
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: SSH into EC2 and deploy Docker container
      uses: appleboy/ssh-action@v0.1.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/bibim:dev
          docker stop bibim || true && docker rm bibim || true
          docker run -d --name bibim -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/bibim:dev
