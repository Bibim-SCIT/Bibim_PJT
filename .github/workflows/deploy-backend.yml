name: Build and Deploy Docker Image

on:
  push:
    branches:
      - dev  # dev 브랜치에 푸시될 때 자동 실행
    paths:
      - 'Back-End/**'  # 'Back-End/' 폴더 내의 파일들이 변경될 때만 배포 트리거

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Create application.yml
      run: |
        mkdir -p src/main/resources
        cat <<EOL > src/main/resources/application.yml
        spring:
          application:
            name: Back-End
          datasource:
            url: ${DB_URL}
            username: ${DB_USERNAME}
            password: ${DB_PASSWORD}
            driver-class-name: com.mysql.cj.jdbc.Driver
          jpa:
            hibernate:
              ddl-auto: update
            generate-ddl: true
            show-sql: true
            properties:
              hibernate:
                format_sql: true
                dialect: org.hibernate.dialect.MySQL8Dialect
          servlet:
            multipart:
              enabled: true  # Multipart 파일 업로드 활성화
              max-file-size: 100MB  # 업로드 가능한 최대 파일 크기 설정
              max-request-size: 2MB  # 요청의 최대 크기 설정
          cache:
            type: caffeine #  워크스페이스 멤버 접속 조회 시 사용
          mail:
            host: smtp.gmail.com
            port: 587
            username: ${MAIL_USERNAME}
            password: ${MAIL_PASSWORD}
            properties:
              mail:
                smtp:
                  auth: true
                  starttls:
                    enable: true
          data:
            redis:
              host: localhost
              port: 6379
          cloud:
            aws:
              credentials:
                access-key: ${S3_ACCESS_KEY}
                secret-key: ${S3_SECRET_KEY}
            region:
              static: us-east-1
            stack:
              auto: false
            s3:
              bucket: bibim

        logging:
          level:
            org.springframework.security: DEBUG

        secret_key: ${SECRET_KEY}
        EOL

    - name: Build Docker image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/bibim:dev ./Back-End

    - name: Push Docker image
      run: docker push ${{ secrets.DOCKER_USERNAME }}/bibim:dev

  deploy:
    runs-on: ubuntu-latest
    needs: build  # 'build' 작업이 성공해야 'deploy' 작업이 실행됨

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: SSH into EC2 and deploy Docker container
      uses: appleboy/ssh-action@v0.1.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          # Pull the new Docker image
          docker pull ${{ secrets.DOCKER_USERNAME }}/bibim:dev
          # Stop and remove the running container (if any)
          docker stop bibim || true && docker rm bibim || true
          # Run the new Docker container
          docker run -d --name bibim -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/bibim:dev
