import React, { useState, useEffect } from "react";
import {
    Dialog,
    IconButton,
    Typography,
    Box,
    TextField,
    Button,
    FormControl,
    Select,
    MenuItem,
    InputLabel,
    Snackbar,
    Alert,
    Modal,
    Divider,
    CircularProgress
} from "@mui/material";
import CloseIcon from "@mui/icons-material/Close";
import { styled } from "@mui/material/styles";
import { createSchedule } from "../../../api/schedule"; // ‚úÖ ÏùºÏ†ï ÏÉùÏÑ± API Ï∂îÍ∞Ä
import { useSelector } from "react-redux"; // ‚úÖ ReduxÏóêÏÑú ÌòÑÏû¨ ÏõåÌÅ¨Ïä§ÌéòÏù¥Ïä§ Í∞ÄÏ†∏Ïò§Í∏∞

// ÌÉúÍ∑∏ API Ìï®Ïàò import Ï∂îÍ∞Ä
import { fetchLargeTags, fetchMediumTags, fetchSmallTags } from "../../../api/tag";

// Î™®Îã¨ Ïä§ÌÉÄÏùº Ï†ïÏùò
const style = {
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)',
    width: 500,
    bgcolor: 'background.paper',
    borderRadius: 1,
    boxShadow: 24,
    p: 0,
    position: 'relative',
    outline: 'none',
    maxHeight: '90vh',
    overflow: 'auto'
};

const ScheduleCreateModal = ({ open, onClose, onCreateSuccess }) => {
    const activeWorkspace = useSelector((state) => state.workspace.activeWorkspace); // ‚úÖ ÌòÑÏû¨ ÏõåÌÅ¨Ïä§ÌéòÏù¥Ïä§ Í∞ÄÏ†∏Ïò§Í∏∞

    const [formData, setFormData] = useState({
        scheduleTitle: "",
        scheduleContent: "",
        tag1: "",
        tag2: "",
        tag3: "",
        scheduleStatus: "UNASSIGNED",
        scheduleStartDate: "",
        scheduleFinishDate: "",
    });

    const [isCreating, setIsCreating] = useState(false); // ‚úÖ ÏÉùÏÑ± Ï§ë ÏÉÅÌÉú Ï∂îÍ∞Ä

    useEffect(() => {
        if (open) {
            setFormData({
                scheduleTitle: "",
                scheduleContent: "",
                tag1: "",
                tag2: "",
                tag3: "",
                scheduleStatus: "UNASSIGNED",
                scheduleStartDate: "",
                scheduleFinishDate: "",
            });
        }
    }, [open]);

    // ÌÉúÍ∑∏ ÏÉÅÌÉú Í¥ÄÎ¶¨
    const [largeTags, setLargeTags] = useState([]);
    const [mediumTags, setMediumTags] = useState([]);
    const [smallTags, setSmallTags] = useState([]);

    // Ïä§ÎÇµÎ∞î ÏÉÅÌÉú Ï∂îÍ∞Ä
    const [snackbar, setSnackbar] = useState({
        open: false,
        message: '',
        severity: 'success'
    });

    // Î™®Îã¨Ïù¥ Ïó¥Î¶¥ Îïå ÎåÄÎ∂ÑÎ•ò ÌÉúÍ∑∏ Í∞ÄÏ†∏Ïò§Í∏∞
    useEffect(() => {
        if (open && activeWorkspace?.wsId) {
            fetchLargeTags(activeWorkspace.wsId)
                .then((tags) => setLargeTags(tags))
                .catch((error) => console.error("ÎåÄÎ∂ÑÎ•ò ÌÉúÍ∑∏ fetch Ïã§Ìå®:", error));
        }
    }, [open, activeWorkspace]);

    console.log("ÎåÄÎ∂ÑÎ•òÌÉúÍ∑∏ Ìï®Î≥¥Ïûê", largeTags);

    // ÎåÄÎ∂ÑÎ•ò ÏÑ†ÌÉù Ïãú Ï§ëÎ∂ÑÎ•ò ÌÉúÍ∑∏ Í∞ÄÏ†∏Ïò§Í∏∞
    useEffect(() => {
        if (formData.tag1 && activeWorkspace?.wsId) {
            // formData.tag1ÏùÄ tagNameÏù¥ÎØÄÎ°ú, Ìï¥Îãπ tagÏùò tagNumber Ï∞æÍ∏∞
            const selectedLargeTag = largeTags.find(tag => tag.tagName === formData.tag1);
            if (selectedLargeTag) {
                console.log("ÎåÄÎ∂ÑÎ•òÏóêÏÑú Ï§ëÎ∂ÑÎ•òÎ°ú", activeWorkspace.wsId, selectedLargeTag.largeTagNumber);
                fetchMediumTags(activeWorkspace.wsId, selectedLargeTag.largeTagNumber)
                    .then((tags) => setMediumTags(tags))
                    .catch((error) => console.error("Ï§ëÎ∂ÑÎ•ò ÌÉúÍ∑∏ fetch Ïã§Ìå®:", error));
            }
        }
    }, [formData.tag1, activeWorkspace, largeTags]);

    // Ï§ëÎ∂ÑÎ•ò ÏÑ†ÌÉù Ïãú ÏÜåÎ∂ÑÎ•ò ÌÉúÍ∑∏ Í∞ÄÏ†∏Ïò§Í∏∞
    useEffect(() => {
        if (formData.tag2 && formData.tag1 && activeWorkspace?.wsId) {
            const selectedLargeTag = largeTags.find(tag => tag.tagName === formData.tag1);
            const selectedMediumTag = mediumTags.find(tag => tag.tagName === formData.tag2);
            if (selectedLargeTag && selectedMediumTag) {
                console.log("Ï§ëÎ∂ÑÎ•òÏóêÏÑú ÏÜåÎ∂ÑÎ•òÎ°ú", activeWorkspace.wsId, selectedLargeTag.largeTagNumber, selectedMediumTag.mediumTagNumber);
                fetchSmallTags(activeWorkspace.wsId, selectedLargeTag.largeTagNumber, selectedMediumTag.mediumTagNumber)
                    .then((tags) => setSmallTags(tags))
                    .catch((error) => console.error("ÏÜåÎ∂ÑÎ•ò ÌÉúÍ∑∏ fetch Ïã§Ìå®:", error));
            }
        }
    }, [formData.tag2, formData.tag1, activeWorkspace, largeTags, mediumTags]);

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!formData.scheduleTitle || !formData.scheduleStartDate || !formData.scheduleFinishDate) {
            // alert("Î™®Îì† ÌïÑÎìúÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.");
            setSnackbar({
                open: true,
                message: 'Î™®Îì† ÌïÑÎìúÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.',
                severity: 'error'
            });
            return;
        }

        if (!activeWorkspace || !activeWorkspace.wsId) {
            // alert("ÏõåÌÅ¨Ïä§ÌéòÏù¥Ïä§ Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.");
            setSnackbar({
                open: true,
                message: 'ÏõåÌÅ¨Ïä§ÌéòÏù¥Ïä§ Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.',
                severity: 'error'
            });
            return;
        }

        try {
            setIsCreating(true); // ‚úÖ ÏÉùÏÑ± Ï§ë ÏÉÅÌÉú ÌôúÏÑ±Ìôî

            const requestData = {
                wsId: activeWorkspace.wsId, // ‚úÖ ÏõåÌÅ¨Ïä§ÌéòÏù¥Ïä§ ID Ï∂îÍ∞Ä
                scheduleTitle: formData.scheduleTitle,
                scheduleContent: formData.scheduleContent,
                tag1: formData.tag1,
                tag2: formData.tag2,
                tag3: formData.tag3,
                scheduleStartDate: `${formData.scheduleStartDate}T00:00:00`, // ‚úÖ T00:00:00ÏúºÎ°ú ÏàòÏ†ï
                scheduleFinishDate: `${formData.scheduleFinishDate}T00:00:00`, // ‚úÖ API Î™ÖÏÑ∏ÏÑúÏôÄ ÏùºÏπò
            };

            console.log("üìå ÏùºÏ†ï ÏÉùÏÑ± ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞:", requestData);

            // await createSchedule(requestData);
            const newSchedule = await createSchedule(requestData); // ‚úÖ ÏÉùÏÑ±Îêú ÏùºÏ†ï Î∞òÌôò
            console.log("ÏÉàÏä§ÏºÄÏ§Ñ", newSchedule);

            // alert("ÏùºÏ†ïÏù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.");
            setSnackbar({
                open: true,
                message: 'ÏùºÏ†ïÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.',
                severity: 'success'
            });
            onClose(); // Î™®Îã¨ Îã´Í∏∞
            // window.location.reload(); // ÌéòÏù¥ÏßÄ ÏÉàÎ°úÍ≥†Ïπ®ÌïòÏó¨ Ï∫òÎ¶∞Îçî Î∞òÏòÅ

            // ‚úÖ Î∞©Î≤ï 2: Ï†ÑÏ≤¥ ÏùºÏ†ï Îã§Ïãú Î∂àÎü¨Ïò§Í∏∞ (fetch ÏöîÏ≤≠)
            if (onCreateSuccess) {
                onCreateSuccess(); // SchedulePageÏóêÏÑú fetchScheduleTasks(wsId) Ìò∏Ï∂ú
            }

        } catch (error) {
            console.error("‚ùå ÏùºÏ†ï ÏÉùÏÑ± Ïã§Ìå®:", error);
            // alert("ÏùºÏ†ï ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
            setSnackbar({
                open: true,
                message: 'ÏùºÏ†ï ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.',
                severity: 'error'
            });
        } finally {
            setIsCreating(false); // ‚úÖ ÏÉùÏÑ± ÏôÑÎ£å ÌõÑ Î≤ÑÌäº Îã§Ïãú ÌôúÏÑ±Ìôî
        }
    };

    // Ïä§ÎÇµÎ∞î Îã´Í∏∞ Ìï∏Îì§Îü¨
    const handleSnackbarClose = (event, reason) => {
        if (reason === 'clickaway') {
            return;
        }
        setSnackbar(prev => ({ ...prev, open: false }));
    };

    return (
        <>
            <Modal open={open} onClose={onClose}>
                <Box sx={style}>
                    {/* Ìó§Îçî ÏòÅÏó≠ */}
                    <Box sx={{ p: 3, pb: 2 }}>
                        <IconButton
                            onClick={onClose}
                            sx={{
                                position: 'absolute',
                                right: 8,
                                top: 8
                            }}
                        >
                            <CloseIcon />
                        </IconButton>

                        <Typography
                            variant="h3"
                            sx={{
                                fontWeight: 400,
                                mb: 0
                            }}
                        >
                            ÏùºÏ†ï ÏÉùÏÑ±
                        </Typography>
                    </Box>

                    <Divider sx={{ borderColor: '#e0e0e0' }} />

                    {/* ÎÇ¥Ïö© ÏòÅÏó≠ */}
                    <Box sx={{ p: 3 }}>
                        <form onSubmit={handleSubmit}>
                            <TextField
                                fullWidth
                                label="ÏùºÏ†ï Ï†úÎ™©"
                                value={formData.scheduleTitle}
                                onChange={(e) => setFormData({ ...formData, scheduleTitle: e.target.value })}
                                sx={{ mb: 2 }}
                                color="secondary"
                            />

                            <TextField
                                fullWidth
                                label="ÏùºÏ†ï ÎÇ¥Ïö©"
                                multiline
                                rows={3}
                                value={formData.scheduleContent}
                                onChange={(e) => setFormData({ ...formData, scheduleContent: e.target.value })}
                                sx={{ mb: 2 }}
                                color="secondary"
                            />

                            <Box sx={{ display: "flex", gap: 2, mb: 2 }}>
                                <TextField
                                    fullWidth
                                    label="ÏãúÏûëÏùº"
                                    type="date"
                                    value={formData.scheduleStartDate}
                                    onChange={(e) => setFormData({ ...formData, scheduleStartDate: e.target.value })}
                                    InputLabelProps={{ shrink: true }}
                                />
                                <TextField
                                    fullWidth
                                    label="Ï¢ÖÎ£åÏùº"
                                    type="date"
                                    value={formData.scheduleFinishDate}
                                    onChange={(e) => setFormData({ ...formData, scheduleFinishDate: e.target.value })}
                                    InputLabelProps={{ shrink: true }}
                                />
                            </Box>

                            <Divider sx={{ my: 2 }} />

                            <FormControl fullWidth sx={{ mb: 2 }}>
                                <InputLabel>ÎåÄÎ∂ÑÎ•ò*</InputLabel>
                                <Select
                                    value={formData.tag1}
                                    onChange={(e) => setFormData({ ...formData, tag1: e.target.value, tag2: "", tag3: "" })}
                                >
                                    {largeTags.map((tag) => (
                                        <MenuItem key={tag.tagNumber} value={tag.tagName}>
                                            {/* {tag.tagName} */}
                                            <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
                                                <Box sx={{ width: 12, height: 12, borderRadius: "50%", bgcolor: tag.tagColor }}></Box>
                                                {tag.tagName}
                                            </Box>
                                        </MenuItem>
                                    ))}
                                </Select>
                            </FormControl>

                            <FormControl fullWidth sx={{ mb: 2 }}>
                                <InputLabel>Ï§ëÎ∂ÑÎ•ò*</InputLabel>
                                <Select
                                    value={formData.tag2}
                                    onChange={(e) => setFormData({ ...formData, tag2: e.target.value, tag3: "" })}
                                    disabled={!formData.tag1}
                                >
                                    {mediumTags.map((tag) => (
                                        <MenuItem key={tag.tagNumber} value={tag.tagName}>
                                            {tag.tagName}
                                        </MenuItem>
                                    ))}
                                </Select>
                            </FormControl>

                            <FormControl fullWidth sx={{ mb: 2 }}>
                                <InputLabel>ÏÜåÎ∂ÑÎ•ò*</InputLabel>
                                <Select
                                    value={formData.tag3}
                                    onChange={(e) => setFormData({ ...formData, tag3: e.target.value })}
                                    disabled={!formData.tag2}
                                >
                                    {smallTags.map((tag) => (
                                        <MenuItem key={tag.tagNumber} value={tag.tagName}>
                                            {tag.tagName}
                                        </MenuItem>
                                    ))}
                                </Select>
                            </FormControl>
                        </form>
                    </Box>

                    {/* ÌïòÎã® Î≤ÑÌäº ÏòÅÏó≠ */}
                    <Box sx={{
                        display: 'flex',
                        justifyContent: 'flex-end',
                        gap: 1,
                        p: 2,
                        bgcolor: '#f8f9fa',
                        borderTop: '1px solid #e0e0e0'
                    }}>
                        <Button
                            variant="outlined"
                            onClick={onClose}
                            sx={{
                                color: '#666',
                                borderColor: '#d0d0d0',
                                boxShadow: 'none'
                            }}
                        >
                            Ï∑®ÏÜå
                        </Button>
                        <Button
                            variant="contained"
                            onClick={handleSubmit}
                            disabled={isCreating} // ‚úÖ ÏÉùÏÑ± Ï§ë ÎπÑÌôúÏÑ±Ìôî
                            sx={{
                                bgcolor: '#7C3AED',
                                boxShadow: 'none',
                                '&:hover': {
                                    bgcolor: '#6D28D9',
                                    boxShadow: 'none'
                                }
                            }}
                        >
                            {isCreating ? (
                                <>
                                    <CircularProgress size={24} color="inherit" sx={{ mr: 1 }} />
                                    ÏÉùÏÑ± Ï§ë...
                                </>
                            ) : "ÏÉùÏÑ±ÌïòÍ∏∞"}
                        </Button>
                    </Box>
                </Box>
            </Modal>

            {/* Ïä§ÎÇµÎ∞î Ï∂îÍ∞Ä */}
            <Snackbar
                open={snackbar.open}
                autoHideDuration={3000}
                onClose={handleSnackbarClose}
                anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
            >
                <Alert
                    onClose={handleSnackbarClose}
                    severity={snackbar.severity}
                    sx={{ width: '100%' }}
                >
                    {snackbar.message}
                </Alert>
            </Snackbar>
        </>
    );
};

export default ScheduleCreateModal;
