/* eslint-disable prettier/prettier */
import React, { useEffect, useState, useCallback } from "react";
import { fetchWorkspaceUsers, fetchWorkspaceMembersStatus } from "../../../api/workspaceApi";
import PersonIcon from '@mui/icons-material/Person';
import "./ActiveUsersComponent.css";

/**
 * ÏõåÌÅ¨Ïä§ÌéòÏù¥Ïä§ Î©§Î≤Ñ Ï†ëÏÜç ÏÉÅÌÉú ÌëúÏãú Ïª¥Ìè¨ÎÑåÌä∏
 * 
 * @param {string} workspaceId - ÏõåÌÅ¨Ïä§ÌéòÏù¥Ïä§ ID
 * @param {function} toggleMemberStatusModal - Î©§Î≤Ñ ÏÉÅÌÉú Î™®Îã¨ ÌÜ†Í∏Ä Ìï®Ïàò
 */
function ActiveUsersComponent({ workspaceId, toggleMemberStatusModal }) {
    // ÏÉÅÌÉú Í¥ÄÎ¶¨
    const [activeUsers, setActiveUsers] = useState([]); // Ï†ëÏÜç Ï§ëÏù∏ ÏÇ¨Ïö©Ïûê Î™©Î°ù
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);

    /**
     * ÏõåÌÅ¨Ïä§ÌéòÏù¥Ïä§ Î©§Î≤Ñ Î™©Î°ùÍ≥º Ï†ëÏÜç ÏÉÅÌÉúÎ•º Í∞ÄÏ†∏Ïò§Îäî Ìï®Ïàò
     */
    const fetchMembersStatus = useCallback(async () => {
        if (!workspaceId) return;
        
        setIsLoading(true);
        try {
            // 1. ÏõåÌÅ¨Ïä§ÌéòÏù¥Ïä§ Î©§Î≤Ñ Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
            const usersData = await fetchWorkspaceUsers(workspaceId);
            
            // 2. ÏõåÌÅ¨Ïä§ÌéòÏù¥Ïä§ Î©§Î≤ÑÏùò Ï†ëÏÜç ÏÉÅÌÉú Í∞ÄÏ†∏Ïò§Í∏∞
            const statusData = await fetchWorkspaceMembersStatus(workspaceId);
            
            if (!statusData || statusData.length === 0) {
                // Ï†ëÏÜç ÏÉÅÌÉú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÎäî Í≤ΩÏö∞ Î™®Îì† ÏÇ¨Ïö©ÏûêÎ•º Ïò§ÌîÑÎùºÏù∏ÏúºÎ°ú ÌëúÏãú
                const offlineUsers = usersData.map(user => ({
                    ...user,
                    loginStatus: false
                }));
                setActiveUsers(offlineUsers);
                return;
            }
            
            // 3. usersDataÏóê statusDataÎ•º Îß§ÌïëÌïòÏó¨ Ïò®ÎùºÏù∏/Ïò§ÌîÑÎùºÏù∏ ÏÉÅÌÉú Ï∂îÍ∞Ä
            const updatedUsers = usersData.map(user => {
                // Ïù¥Î©îÏùºÎ°ú ÏÉÅÌÉú Îç∞Ïù¥ÌÑ∞ Ï∞æÍ∏∞
                const userStatus = statusData.find(status => status.email === user.email);
                
                // ÏÉÅÌÉú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏúºÎ©¥ Ìï¥Îãπ ÏÉÅÌÉú ÏÇ¨Ïö©, ÏóÜÏúºÎ©¥ Ïò§ÌîÑÎùºÏù∏ÏúºÎ°ú ÏÑ§Ï†ï
                return {
                    ...user,
                    loginStatus: userStatus?.status === 'online'
                };
            });
            
            setActiveUsers(updatedUsers);
        } catch (error) {
            console.error("üö® ÏÇ¨Ïö©Ïûê Î™©Î°ù Î∞è Ï†ëÏÜç ÏÉÅÌÉú Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:", error);
            setError("Î©§Î≤Ñ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§");
        } finally {
            setIsLoading(false);
        }
    }, [workspaceId]);

    /**
     * ÏõåÌÅ¨Ïä§ÌéòÏù¥Ïä§ ID Î≥ÄÍ≤Ω Ïãú Î©§Î≤Ñ Ï†ëÏÜç ÏÉÅÌÉú Í∞ÄÏ†∏Ïò§Í∏∞
     */
    useEffect(() => {
        fetchMembersStatus();
        
        // 5Î∂ÑÎßàÎã§ Î©§Î≤Ñ Ï†ëÏÜç ÏÉÅÌÉú Í∞±Ïã†
        const intervalId = setInterval(fetchMembersStatus, 5 * 60 * 1000);
        
        return () => clearInterval(intervalId);
    }, [workspaceId, fetchMembersStatus]);

    return (
        <div className="active-users" onClick={toggleMemberStatusModal}>
            <PersonIcon sx={{ color: '#6b7280', fontSize: 20 }} />
            {isLoading ? (
                <span>Î©§Î≤Ñ Ï†ïÎ≥¥ Î°úÎî© Ï§ë...</span>
            ) : error ? (
                <span className="error-text">{error}</span>
            ) : (
                <>
                    <span>{activeUsers.filter(user => user.loginStatus).length}Î™Ö Ï†ëÏÜçÏ§ë</span>
                    <div className="active-users-list">
                        {activeUsers.map((member, index) => (
                            <div key={index} className="active-user">
                                <div className="user-avatar">
                                    {member.profileImage ? (
                                        <img src={member.profileImage} alt={member.email} />
                                    ) : (
                                        <div className="default-avatar">
                                            {member.email.charAt(0).toUpperCase()}
                                        </div>
                                    )}
                                </div>
                                <div className="user-info">
                                    <span className="user-email">{member.email}</span>
                                    {member.nickname && <span className="user-nickname">({member.nickname})</span>}
                                </div>
                                <div className="user-status">
                                    <span className={`status-dot ${member.loginStatus ? 'online' : 'offline'}`} />
                                </div>
                            </div>
                        ))}
                    </div>
                </>
            )}
        </div>
    );
}

export default ActiveUsersComponent; 